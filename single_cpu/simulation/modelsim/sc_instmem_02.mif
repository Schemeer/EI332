DEPTH = 64; % Memory depth and width are required % 
WIDTH = 32; % Enter a decimal number % 
ADDRESS_RADIX = HEX; % Address and value radixes are optional % 
DATA_RADIX = HEX; % Enter BIN, DEC, HEX, or OCT; unless % 
% otherwise specified, radixes = HEX % 
CONTENT 
BEGIN 
 
 0	:	20010050;	%	(00)	main:  	addi $1,  $0,  01010000b	# address 50h              %  
 1	:	20020080;	%	(04)	       	addi $2,  $0,  10000000b	# address 80h              %  
 2	:	20030084;	%	(08)	       	addi $3,  $0,  10000100b	# address 84h              %  
 3	:	200400c0;	%	(0c)	       	addi $4,  $0,  11000000b	# address c0h              %  
 4	:	200500c4;	%	(10)	       	addi $5,  $0,  11000100b	# address c4h              %  
 5	:	20060055;	%	(14)	       	addi $6,  $0,  01010101b	# data    55h              %  
 6	:	200700aa;	%	(18)	       	addi $7,  $0,  10101010b	# data    aah              %  
 7	:	200a0000;	%	(1c)	loop:  	addi $10, $0,  0        	# r10 = 0                  %  
 8	:	200b0000;	%	(20)	       	addi $11, $0,  0        	# r11 = 0                  %  
 9	:	8c2c0000;	%	(24)	       	lw   $12, 0($1)	        	# load data[50h]           %  
 A	:	ac260000;	%	(28)	       	sw   $6,  0($1)	        	# store 55h to [50]        %  
 B	:	8c2c0000;	%	(2c)	       	lw   $12, 0($1)	        	# load data[50h]           %  
 C	:	ac270000;	%	(30)	       	sw   $7,  0($1)	        	# store aah to [50]        %  
 D	:	ac460000;	%	(34)	       	sw   $6,  0($2)	        	# output 55h to [80h]      %  
 E	:	ac660000;	%	(38)	       	sw   $6,  0($3)	        	# output 55h to [84h]      %  
 F	:	ac470000;	%	(3c)	       	sw   $7,  0($2)	        	# output aah to [80h]      % 
 10	:	ac670000;	%	(40)	       	sw   $7,  0($3)	        	# output aah to [84h]      % 
 11	:	8c8a0000;	%	(44)	       	lw   $10, 0($4)	        	# input data from [c0h]    % 
 12	:	8cab0000;	%	(48)	       	lw   $11, 0($5)	        	# input data from [c4h]    % 
 13	:	8c8a0000;	%	(4c)	       	lw   $10, 0($4)	        	# input data from [c0h]*   % 
 14	:	8cab0000;	%	(50)	       	lw   $11, 0($5)	        	# input data from [c4h]*   % 
 15	:	214a0000;	%	(54)	       	addi $10, $10, 0        	# just check $10           % 
 16	:	216b0000;	%	(58)	       	addi $11, $11, 0        	# just check $11           % 
 17	:	08000007;	%	(5c)	       	j   	loop	            # loop                     % 
 
END ;